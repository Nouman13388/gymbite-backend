generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email         String         @unique
  name          String         @db.VarChar(255)
  role          Role           @default(CLIENT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  password      String         @db.VarChar(255)
  id            Int            @id @default(autoincrement())
  firebaseUid   String?        @unique
  deviceToken   String?        // FCM device token for push notifications
  clients       Client?
  feedbacks     Feedback[]
  mealPlans     MealPlan[]
  notifications Notification[]
  trainers      Trainer?
  workoutPlans  WorkoutPlan[]
}

model Trainer {
  id              Int            @id @default(autoincrement())
  userId          Int            @unique
  specialty       String         @db.VarChar(255)
  experienceYears Int
  appointments    Appointment[]
  consultations   Consultation[]
  feedbacks       Feedback[]
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id                 Int            @id @default(autoincrement())
  userId             Int            @unique
  weight             Decimal
  height             Decimal
  BMI                Decimal
  fitnessGoals       String?
  dietaryPreferences String?
  appointments       Appointment[]
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  consultations      Consultation[]
  progress           Progress[]
}

model Consultation {
  id          Int      @id @default(autoincrement())
  clientId    Int
  trainerId   Int
  scheduledAt DateTime
  status      String   @db.VarChar(255)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  trainer     Trainer  @relation(fields: [trainerId], references: [id], onDelete: Cascade)
}

model Appointment {
  id              Int      @id @default(autoincrement())
  clientId        Int
  trainerId       Int
  appointmentTime DateTime
  status          String   @db.VarChar(255)
  notes           String?
  createdAt       DateTime @default(now())
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  trainer         Trainer  @relation(fields: [trainerId], references: [id], onDelete: Cascade)
}

model WorkoutPlan {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String   @db.VarChar(255)
  exercises String
  sets      Int
  reps      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MealPlan {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String   @default("Untitled Meal Plan") @db.VarChar(255) // Title/name of the meal plan
  description String?                                                  // Optional description of the meal plan
  category    String   @default("General") @db.VarChar(100)            // Category of the meal plan (e.g., "Weight Loss", "Muscle Gain")
  imageUrl    String?  @db.VarChar(500)                               // URL of the meal plan image
  calories    Int      @default(0)                                     // Total calories in the meal plan
  protein     Decimal  @default(0)                                     // Amount of protein in the meal plan
  fat         Decimal  @default(0)                                     // Amount of fat in the meal plan
  carbs       Decimal  @default(0)                                     // Amount of carbohydrates in the meal plan
  createdAt   DateTime @default(now())                                 // Timestamp for when the meal plan was created
  updatedAt   DateTime @updatedAt                                      // Timestamp for when the meal plan was last updated
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User with cascade deletion
  meals       Meal[]                                                   // One-to-many relationship with individual meals
}

model Meal {
  id          Int      @id @default(autoincrement())                 // Primary key with auto-increment
  mealPlanId  Int                                                   // Foreign key referencing MealPlan
  name        String   @db.VarChar(255)                            // Name of the meal
  description String?                                              // Optional description of the meal
  type        String   @default("Breakfast") @db.VarChar(50)      // Type of meal (breakfast, lunch, dinner, snack)
  ingredients String[] @default([])                                // Array of ingredients
  calories    Int      @default(0)                                 // Calories in this meal
  protein     Int      @default(0)                                 // Protein content in grams
  imageUrl    String?  @db.VarChar(500)                           // URL of the meal image
  createdAt   DateTime @default(now())                             // Timestamp for when the meal was created
  updatedAt   DateTime @updatedAt                                  // Timestamp for when the meal was last updated
  mealPlan    MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade) // Relation to MealPlan with cascade deletion
}

model Feedback {
  id        Int      @id @default(autoincrement())
  userId    Int
  trainerId Int
  rating    Int
  comments  String?
  createdAt DateTime @default(now())
  trainer   Trainer  @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id               Int      @id @default(autoincrement())
  userId           Int
  message          String
  notificationType String   @db.VarChar(255)
  status           String   @db.VarChar(255)
  createdAt        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Progress {
  id                 Int      @id @default(autoincrement())
  clientId           Int
  weight             Decimal
  BMI                Decimal
  progressDate       DateTime
  workoutPerformance String?
  mealPlanCompliance String?
  createdAt          DateTime @default(now())
  client             Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

enum Role {
  CLIENT
  TRAINER
  ADMIN
}
